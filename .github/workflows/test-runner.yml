name: Test Runner
run-name: "Test Runner `${{ github.ref_name || github.head_ref }}`"

on: push

env:
  BUILD_TYPE: Debug
  CMAKE_BUILD_DIRECTORY: build
  CPM_CACHE_DIR: .cpm-cache
  SCCACHE_CACHE_MULTIARCH: 1
  SCCACHE_GHA_ENABLED: true

defaults:
  run:
    shell: bash

jobs:
  run-tests:
    strategy:
      matrix:
        platform: [macos-latest, windows-latest]
        include:
          - platform: macos-latest
            platform-name: macOS
            package-manager: brew
            additional-cmake-options: -DJIVE_ENABLE_COVERAGE=ON -DJIVE_ENABLE_SANITISERS=ON

          - platform: windows-latest
            platform-name: Windows
            platform-shell: cmd
            package-manager: choco
            additional-cmake-options: -DCMAKE_PROGRAM_PATH="C:\ProgramData\chocolatey\lib\pluginval\tools"

    name: Test ${{ matrix.platform-name }}
    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4
      - name: Install Ninja
        run: ${{ matrix.package-manager }} install ninja
      - name: Install pluginval
        run: ${{matrix.package-manager}} install pluginval
      - name: Setup devcmd
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.13.0

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Restore CPM dependencies
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.CPM_CACHE_DIR }}
          key: cpm-${{ runner.os }}-${{ github.ref_name || github.head_ref }}-${{ github.run_number }}-${{ github.run_attempt }}
          restore-keys: |
            cpm-${{ runner.os }}-${{ github.ref_name || github.head_ref }}-${{ github.run_number }}
            cpm-${{ runner.os }}-${{ github.ref_name || github.head_ref }}
            cpm-${{ runner.os }}-main
            cpm-${{ runner.os }}

      - name: CMake Generate
        run: |
          cmake \
            -B ${{ env.CMAKE_BUILD_DIRECTORY }} \
            -G Ninja \
            -D CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -D JIVE_BUILD_TEST_RUNNER=ON \
            -D JIVE_BUILD_DEMO_RUNNER=ON \
            -D JIVE_BUILD_EXAMPLES=ON \
            -D CMAKE_C_COMPILER_LAUNCHER=sccache \
            -D CMAKE_CXX_COMPILER_LAUNCHER=sccache \
            -D CPM_SOURCE_CACHE=${{ env.CPM_CACHE_DIR }} \
            -D CMAKE_POLICY_DEFAULT_CMP0141=NEW \
            -D CMAKE_MSVC_DEBUG_INFORMATION_FORMAT=Embedded \
            ${{ matrix.additional-cmake-options }}

      - name: Cache CPM dependencies
        uses: actions/cache/save@v4
        with:
          path: ${{ env.CPM_CACHE_DIR }}
          key: cpm-${{ runner.os }}-${{ github.ref_name || github.head_ref }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: CMake Build
        run: |
          cmake \
            --build ${{ env.CMAKE_BUILD_DIRECTORY }} \
            --config ${{ env.BUILD_TYPE }}

      - name: Run CTest
        run: |
          cd ${{ env.CMAKE_BUILD_DIRECTORY }}
          ctest \
            --output-on-failure \
            --extra-verbose \
            -j14 \
            -C ${{ env.BUILD_TYPE }} \
            -T test

      - name: Install lcov
        if: runner.os == 'macOS'
        working-directory: ${{github.workspace}}/build
        run: brew install lcov

      - name: Generate Coverage Report
        if: runner.os == 'macOS'
        working-directory: ${{github.workspace}}/build
        run: |
          lcov \
            --directory . \
            --capture \
            --output-file coverage.info \
            --ignore-errors inconsistent \
            --ignore-errors gcov \
            --ignore-errors range \
            --ignore-errors source \
            --ignore-errors format

      - name: Upload Coverage Report
        if: runner.os == 'macOS'
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          files: ./build/coverage.info
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  projucer-build:
    name: Projucer Build
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download Projucer
        uses: robinraju/release-downloader@v1.11
        with:
          extract: true
          fileName: "*-osx.zip"
          latest: true
          out-file-path: ${{ runner.temp }}
          repository: juce-framework/JUCE

      - name: Build projects
        run: |
          unzip -q ${{ runner.temp }}/juce*.zip -d ${{ runner.temp }}/JUCE
          PROJUCER=${{ runner.temp }}/JUCE/Projucer.app/Contents/MacOS/Projucer
          chmod +x ${PROJUCER}
          $PROJUCER --set-global-search-path osx defaultJuceModulePath ${{ runner.temp }}/JUCE/modules
          $PROJUCER --set-global-search-path osx defaultUserModulePath ${{ github.workspace }}

          for JUCER_FILE in $(find "${{ github.workspace }}" -name "*.jucer"); do
            $PROJUCER --resave $JUCER_FILE --fix-missing-dependencies
          done

          for XCODEPROJ in $(find "${{ github.workspace }}" -name "*.xcodeproj"); do
            xcodebuild -project ${XCODEPROJ} -configuration Debug
          done

  verify-formatting:
    name: Verify Formatting
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install clang-format
        run: brew install clang-format

      - name: Verify formatting
        run: python3 .github/scripts/verify_formatting.py
